openapi: 3.1.0
info:
  title: Contact Management API
  description: Contact Management API
  version: 1.0.0
servers:
  - url: 'https://{{environment}}.contact/api/v1'
    variables:
      environment:
        default: dev
        enum:
          - dev
          - qa
          - prod
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                name:
                  type: string
            examples:
              user:
                summary: User example
                value:
                  username: chuluq
                  password: rahasia
                  name: Choirul Chuluq
      responses:
        200:
          description: a user to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user:
                  value:
                    data:
                      username: chuluq
                      name: Choirul Chuluq

        400:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Username must not blank
  /users/login:
    post:
      tags:
        - Users
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            examples:
              user:
                value:
                  username: chuluq
                  password: rahasia
      responses:
        200:
          description: a user to be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                      name:
                        type: string
                      token:
                        type: string
              examples:
                user:
                  value:
                    data:
                      username: chuluq
                      name: Choirul Chuluq
                      token: uuid
        400:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Username or password is wrong
  /users/current:
    get:
      security:
        - Auth: [ ]
      tags:
        - Users
      summary: Get authenticated user data
      responses:
        200:
          description: a user to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user:
                  value:
                    data:
                      username: chuluq
                      name: Choirul Chuluq
        401:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Unauthorized
    patch:
      security:
        - Auth: [ ]
      tags:
        - Users
      summary: Update user data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                name:
                  type: string
            examples:
              user:
                value:
                  password: rahasia
                  name: Choirul Chuluq
      responses:
        200:
          description: a user to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user:
                  value:
                    data:
                      username: chuluq
                      name: Choirul Chuluq
        401:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Unauthorized
    delete:
      security:
        - Auth: [ ]
      tags:
        - Users
      summary: Logout
      responses:
        200:
          description: success logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
              examples:
                success:
                  value:
                    data: OK
        401:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Unauthorized
  /contacts:
    post:
      security:
        - Auth: [ ]
      tags:
        - Contacts
      summary: Create new contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateContact"
            examples:
              user:
                value:
                  first_name: Moch Chaerul
                  last_name: Chuluq
                  email: chuluq@example.com
                  phone: 089999999
      responses:
        200:
          description: a contact to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
              examples:
                contact:
                  value:
                    data:
                      id: 1
                      first_name: Moch Chaerul
                      last_name: Chuluq
                      email: chuluq@example.com
                      phone: 089999999
        400:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: first_name must no be blank
    get:
      security:
        - Auth: [ ]
      tags:
        - Contacts
      summary: Get all contact
      parameters:
        - name: name
          in: query
          required: false
          description: contact first name or contact last name
          schema:
            type: string
        - name: phone
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: number
            default: 1
        - name: size
          in: query
          required: false
          schema:
            type: number
            default: 10
      responses:
        200:
          description: success logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactPagination"
              examples:
                success:
                  value:
                    data:
                      - id: 1
                        first_name: Moch Chaerul
                        last_name: Chuluq
                        email: chuluq@example.com
                        phone: 089999999
                      - id: 2
                        first_name: Moch Chaerul
                        last_name: Chuluq
                        email: chuluq@example.com
                        phone: 089999999
                    pagination:
                      current_page: 1,
                      total_page: 10,
                      size: 10
        401:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Unauthorized
  /contacts/{contactId}:
    get:
      security:
        - Auth: [ ]
      tags:
        - Contacts
      summary: Get detail contact
      parameters:
        - $ref: "#/components/parameters/ContactId"
      responses:
        200:
          description: a contact to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
              examples:
                contact:
                  value:
                    data:
                      id: 1
                      first_name: Moch Chaerul
                      last_name: Chuluq
                      email: chuluq@example.com
                      phone: 089999999
        404:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Contact is not found
    put:
      security:
        - Auth: [ ]
      tags:
        - Contacts
      summary: Update contact
      parameters:
        - $ref: "#/components/parameters/ContactId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateContact"
            examples:
              contact:
                value:
                  data:
                    first_name: Moch Chaerul
                    last_name: Chuluq
                    email: chuluq@example.com
                    phone: 089999999
      responses:
        200:
          description: a contact to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
              examples:
                contact:
                  value:
                    data:
                      id: 1
                      first_name: Moch Chaerul
                      last_name: Chuluq
                      email: chuluq@example.com
                      phone: 089999999
        400:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: first_name must no be blank
    delete:
      security:
        - Auth: [ ]
      tags:
        - Contacts
      summary: Delete contact
      parameters:
        - $ref: "#/components/parameters/ContactId"
      responses:
        200:
          description: success delete contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
              examples:
                success:
                  value:
                    data: OK
        404:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Contact is not found
  /contacts/{contactId}/addresses:
    post:
      security:
        - Auth: [ ]
      tags:
        - Addresses
      summary: Create new address
      parameters:
        - $ref: "#/components/parameters/ContactId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateAddress"
            examples:
              address:
                value:
                  street: Jalan
                  city: Kota
                  province: Provinsi
                  country: Negara
                  postal_code: 23123
      responses:
        200:
          description: address to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
              examples:
                address:
                  value:
                    id: 1
                    street: Jalan
                    city: Kota
                    province: Provinsi
                    country: Negara
                    postal_code: 23123
        400:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: postal_code is required
    get:
      security:
        - Auth: [ ]
      tags:
        - Addresses
      summary: Get all address
      parameters:
        - $ref: "#/components/parameters/ContactId"
      responses:
        200:
          description: list of address to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayAddress"
              examples:
                addresses:
                  value:
                    - id: 1
                      street: Jalan
                      city: Kota
                      province: Provinsi
                      country: Negara
                      postal_code: 23123
                    - id: 2
                      street: Jalan
                      city: Kota
                      province: Provinsi
                      country: Negara
                      postal_code: 23123

        404:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Contact is not found
  /contacts/{contactId}/addresses/{addressId}:
    get:
      security:
        - Auth: [ ]
      tags:
        - Addresses
      summary: Get detail address
      parameters:
        - $ref: "#/components/parameters/ContactId"
        - $ref: "#/components/parameters/AddressId"
      responses:
        200:
          description: address to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
              examples:
                address:
                  value:
                    data:
                      id: 1
                      street: Jalan
                      city: Kota
                      province: Provinsi
                      country: Negara
                      postal_code: 23123
        404:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Address is not found
    put:
      security:
        - Auth: [ ]
      tags:
        - Addresses
      summary: Update address
      parameters:
        - $ref: "#/components/parameters/ContactId"
        - $ref: "#/components/parameters/AddressId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateAddress"
            examples:
              address:
                value:
                  street: Jalan
                  city: Kota
                  province: Provinsi
                  country: Negara
                  postal_code: 23123
      responses:
        200:
          description: address to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
              examples:
                address:
                  value:
                    data:
                      id: 1
                      street: Jalan
                      city: Kota
                      province: Provinsi
                      country: Negara
                      postal_code: 23123
        400:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: postal_code is required
    delete:
      security:
        - Auth: [ ]
      tags:
        - Addresses
      summary: Delete address
      parameters:
        - $ref: "#/components/parameters/ContactId"
        - $ref: "#/components/parameters/AddressId"
      responses:
        200:
          description: success delete address
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
              examples:
                success:
                  value:
                    data: OK
        404:
          description: error to be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                error:
                  value:
                    errors: Address is not found
components:
  securitySchemes:
    Auth:
      description: Authorization
      type: apiKey
      in: header
      name: X-API-TOKEN
  parameters:
    ContactId:
      name: contactId
      in: path
      required: true
      schema:
        type: number
      examples:
        user:
          value: 1
    AddressId:
      name: addressId
      in: path
      required: true
      schema:
        type: number
      examples:
        user:
          value: 1
  schemas:
    User:
      type: object
      properties:
        data:
          type: object
          properties:
            username:
              type: string
            name:
              type: string
    CreateOrUpdateContact:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
    ContactItem:
      type: object
      properties:
        id:
          type: number
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
    Contact:
      type: object
      properties:
        data:
          type: object
          properties:
            $ref: "#/components/schemas/ContactItem"
    ContactPagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ContactItem"
        pagination:
          type: object
          properties:
            current_page:
              type: number
            total_page:
              type: number
            size:
              type: number
    CreateOrUpdateAddress:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        province:
          type: string
        country:
          type: string
        postal_code:
          type: string
    Address:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: number
            street:
              type: string
            city:
              type: string
            province:
              type: string
            country:
              type: string
            postal_code:
              type: string
    ArrayAddress:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              street:
                type: string
              city:
                type: string
              province:
                type: string
              country:
                type: string
              postal_code:
                type: string
    Error:
      type: object
      properties:
        errors:
          type: string